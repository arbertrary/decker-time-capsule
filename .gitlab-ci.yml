stages:
  - ci-img
  - build
  - test
  - deploy
  - stop

ci-img:
  stage: ci-img
  trigger:
    include:
      - local: ci/build-image.yaml
    strategy: depend
  rules:
    - if: "$CI_MERGE_REQUEST_IID == null"
      changes:
        - ci/Dockerfile-base
        - ci/Dockerfile-deps
        - stack.yaml
        - package.yaml
        - ci/build-image.yaml
      when: always

.templates:
  image: kkarczmarczyk/node-yarn
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - docker
  script:
    - make -f symlinks.mk -C third-party copy=true all
  artifacts:
    paths:
      - resource/support

build:linux:
  stage: build
  tags:
    - docker
  image:
    name: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:deps
    entrypoint: [""]
  script:
    - make clean-build
    - cp $(stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  artifacts:
    paths:
      - decker
  cache:
    key: stack_work
    paths:
      - .stack-work
  resource_group: buildimage
  interruptible: true

build:mac:
  tags:
    - mac
  stage: build
  script:
    - git rev-parse --short HEAD
    - make build
    - cp $(stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .stack-work
  artifacts:
    paths:
      - decker
  when: always
  interruptible: true

build:win:
  tags:
    - win
  stage: build
  script:
    - '&.\bin\build.ps1 standalone -preparepackage'
  artifacts:
    paths:
      - decker.exe
      - version.txt
  cache:
    key: build-win
    paths:
      - .stack-work
  when: always
  interruptible: true

test:linux:
  stage: test
  tags:
    - docker
  image:
    name: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:deps
    entrypoint: [""]
  script:
    - STACK_ROOT=`pwd`/.stack make test
  cache:
    key: stack_work
    paths:
      - .stack-work
      - .stack
  needs:
    - job: build:linux
      artifacts: true
  interruptible: true
  resource_group: buildimage

deploy:mac:
  stage: deploy
  image:
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-mac${SUFFIX}
  needs:
    - job: build:mac
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_REF_NAME =~ /^v\d\.\d\.\d-patching$/'
      when: always
  interruptible: true
  resource_group: deploy_mac

deploy:linux:
  stage: deploy
  image:
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-linux${SUFFIX}
  needs:
    - job: build:linux
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_REF_NAME =~ /^v\d\.\d\.\d-patching$/'
      when: always
  interruptible: true
  resource_group: deploy_linux

deploy:win:
  stage: deploy
  image:
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker.exe store/decker/decker-win${SUFFIX}.exe
    - mc cp ./version.txt store/decker/version-win${SUFFIX}.txt
  needs:
    - job: build:win
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_REF_NAME =~ /^v\d\.\d\.\d-patching$/'
      when: always
  interruptible: true
  resource_group: deploy_win

deploy:docker:
  tags:
    - docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: deploy
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/ci/Dockerfile-decker --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest --build-arg IMG_BASE=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:deps --verbosity warn
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
  needs:
    - job: ci-img
      artifacts: false
  interruptible: true
  resource_group: deploy_docker

review:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image:
    name: curlimages/curl:latest
    entrypoint: [""]
  tags:
    - docker
  script:
    - curl --cacert $REVIEW_CA --key $REVIEW_KEY --cert $REVIEW_CRT -F 'decker=@./decker' -X PUT https://cypher.informatik.uni-wuerzburg.de:19368/$CI_COMMIT_REF_NAME
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://review.decker.informatik.uni-wuerzburg.de/$CI_COMMIT_REF_NAME
    on_stop: stop_review
    auto_stop_in: 2 week
  needs:
    - job: build:linux
      artifacts: true
  interruptible: true

stop_review:
  stage: stop
  variables:
    GIT_STRATEGY: none
  image:
    name: curlimages/curl:latest
    entrypoint: [""]
  tags:
    - docker
  script:
    - curl --cacert $REVIEW_CA --key $REVIEW_KEY --cert $REVIEW_CRT -X DELETE https://cypher.informatik.uni-wuerzburg.de:19368/$CI_COMMIT_REF_NAME
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
