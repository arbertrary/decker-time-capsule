stages:
  - templates
  - build
  - test
  - deploy

templates:
  image: kkarczmarczyk/node-yarn
  stage: templates
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - docker
  script:
    - make -f symlinks.mk -C third-party copy=true all
  artifacts:
    paths:
      - resource/support

build:linux:
  stage: build
  tags:
    - docker
  image:
    name: fpco/stack-build
    entrypoint: [""]
  script:
    - STACK_ROOT=`pwd`/.stack make clean-build
    - cp $(STACK_ROOT=`pwd`/.stack stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  artifacts:
    paths:
      - decker
  cache:
    key: stack_work
    paths:
      - .stack-work
      - .stack

build:mac:
  tags:
    - mac
  stage: build
  script:
    - git rev-parse --short HEAD
    - make build
    - cp $(stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .stack-work
  artifacts:
    paths:
      - decker

.build:win:
  tags:
    - win
  stage: build
  script:
    - '&.\bin\build.ps1 standalone -skiptemplates -preparepackage'
  artifacts:
    paths:
      - decker.exe
      - resource.zip
      - version.txt
  cache:
    key: build-win
    paths:
      - .stack-work

.test:linux:
  stage: test
  tags:
    - docker
  image:
    name: fpco/stack-build
    entrypoint: [""]
  script:
    - STACK_ROOT=`pwd`/.stack make test
  cache:
    key: stack_work
    paths:
      - .stack-work
      - .stack
  dependencies:
    - build:linux

deploy:mac:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-mac${SUFFIX}
  dependencies:
    - build:mac
  only:
    - master
    - /^v\d\.\d\.\d-patching$/

deploy:linux:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-linux${SUFFIX}
  dependencies:
    - build:linux
  only:
    - master
    - /^v\d\.\d\.\d-patching$/

.deploy:win:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ]; then SUFFIX="-nightly"; else SUFFIX="-release"; fi
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker.exe store/decker/decker-win${SUFFIX}.exe
    - mc cp ./version.txt store/decker/version-win${SUFFIX}.txt
  dependencies:
    - build:win
  only:
    - master
    - /^v\d\.\d\.\d-patching$/