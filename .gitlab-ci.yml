stages:
  - environment
  - templates
  - build
  - test
  - deploy

ci-stack-container:
  stage: environment
  tags:
    - docker
  image: 
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile-ci --destination $CI_REGISTRY_IMAGE:stack > /dev/null
  only:
    changes:
      - Dockerfile-ci
      - Dockerfile
      - stack.yaml
      - package.yaml
      - .gitlab-ci

templates:
  image: kkarczmarczyk/node-yarn
  stage: templates
  tags:
    - docker
  script:
    - make yarn
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - node_modules
  artifacts:
    paths:
      - resource/support

build:linux:
  stage: build
  tags:
    - docker
  image:
    name: fpco/stack-build
    entrypoint: [""]
  script:
    - STACK_ROOT=`pwd`/.stack make build
    - cp $(STACK_ROOT=`pwd`/.stack stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  artifacts:
    paths:
      - decker
  cache:
    key: stack_work
    paths:
      - .stack-work
      - .stack

build:mac:
  tags:
    - mac
  stage: build
  script:
    - make build
    - cp $(stack path | grep "local-install-root" | awk '{printf "%s/bin/decker",$2}') decker
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .stack-work
  artifacts:
    paths:
      - decker

.build:win:
  tags:
    - win
  stage: build
  script:
    - '&.\bin\build.ps1 preextracted -skiptemplates -preparepackage'
  artifacts:
    paths:
      - decker.exe
      - resource.zip
      - version.txt
  cache:
    key: build-win
    paths:
      - .stack-work


test:linux:
  stage: test
  tags:
    - docker
  image:
    name: fpco/stack-build
    entrypoint: [""]
  script:
    - STACK_ROOT=`pwd`/.stack make test
  cache:
    key: stack_work
    paths:
      - .stack-work
      - .stack
  dependencies:
    - build:linux

deploy:docker:
  image: docker:latest
  stage: deploy
  only:
    - schedules
  tags:
    - decker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE --build-arg MAKE_FLAGS=branch=$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE

deploy:mac:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-mac
  dependencies:
    - build:mac
  only:
    - master

deploy:linux:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker store/decker/decker-linux
  dependencies:
    - build:linux
  only:
    - master

.deploy:win:
  stage: deploy
  image: 
    name: minio/mc:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - mc config host add store http://store.hci.informatik.uni-wuerzburg.de:9002 $MINIO_ACCESS $MINIO_SECRET --api S3v4
    - mc cp ./decker.exe store/decker/decker-win.exe
    - mc cp ./resource.zip store/decker/resource-win.zip
    - mc cp ./version.txt store/decker/version-win.txt
  dependencies:
    - build:win
  only:
    - master