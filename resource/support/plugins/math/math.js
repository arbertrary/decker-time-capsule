/**
 * A plugin which enables rendering of math equations inside
 * of reveal.js slides. Essentially a thin wrapper for MathJax.
 *
 * @author Hakim El Hattab
 * @author Mario Botsch
 *
 * Modifications by Mario Botsch:
 * - upgrade to MathJax v3
 * - disable math typesetting on each slide change
 * - disable AssistiveMML, since it duplicates math in speaker notes
 * - disable SVG font caches, since it doesn't work in speaker notes
 * - reset menu settings in localStorage
 * - use promise mechanism to ensure that math is typset before PDF print
 * - fix links generated by referencing equations
 * - inject class=fragment to incrementally show multi-line equations
 *   (if MathJax element in enclosed in div.math-incremental)
 *
 */

"use strict";

let RevealMath = window.RevealMath || (function(){

	let options = Reveal.getConfig().math || {};
	let mathjax = options.mathjax || 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/';
	let url     = mathjax + 'tex-svg.js';
    

	function defaults( options, defaultOptions ) 
    {
		for (let i in defaultOptions) {
			if ( !options.hasOwnProperty( i ) ) {
				options[i] = defaultOptions[i];
			}
		}
	}


	function loadScript( url, callback ) 
    {
		var head   = document.querySelector( 'head' );
		var script = document.createElement( 'script' );
		script.type = 'text/javascript';
        script.id   = 'MathJax-script';
		script.src  = url;

		// Wrapper for callback to make sure it only fires once
		var finish = function() 
        {
			if( typeof callback === 'function' ) 
            {
				callback.call();
				callback = null;
			}
		}

		script.onload = finish;

		// IE
		script.onreadystatechange = function() {
			if ( this.readyState === 'loaded' ) {
				finish();
			}
		}

		// Normal browsers
		head.appendChild( script );
	}


    function fixLinks()
    {
        for (var a of document.getElementsByTagName("a")) 
        {
            var href = a.href;
            if (href.baseVal)
            {
                var label = href.baseVal;
                if (label.includes("#mjx-eqn"))
                {
                    label = decodeURIComponent(label.substring(1));
                    var eqn = document.getElementById(label);
                    if (eqn)
                    {
                        var s = eqn.closest("section");
                        if (s)
                        {
                            a.href.baseVal = "#" + s.id;
                        }
                    }
                }
            }
        }
    }


    function setupMathFragments()
    {
        // unlabeled equations
        for (let mrow of document.querySelectorAll('.reveal .math-incremental mjx-container svg g[data-mml-node="mtable"]:first-of-type > g[data-mml-node="mtr"]')) {
            mrow.classList.add("fragment");
        }

        // unlabeled equations
        for (let mrow of document.querySelectorAll('.reveal .math-incremental mjx-container svg g[data-mml-node="mtable"]:first-of-type g[data-mml-node="mlabeledtr"]')) {
            mrow.classList.add("fragment");
        }
    }


	return {
		init: function() { 
            
            // remove menu settings, which are stored in localStorage.
            // otherwise user could select CHTML renderer, which is not
            // installed in decker.
            if (window.localStorage)
            {
                window.localStorage.removeItem("MathJax-Menu-Settings");
            }


            // configure through global MathJax object
            window.MathJax = {
                loader: {
                    load: ['[tex]/ams'],
                    typeset: false
                },
                startup: {
                    ready: () => {
                        // bug-fix / work-around for MathJax issue 2402
                        if (MathJax.version === '3.0.5') {
                            const SVGWrapper = MathJax._.output.svg.Wrapper.SVGWrapper;
                            const CommonWrapper = SVGWrapper.prototype.__proto__;
                            SVGWrapper.prototype.unicodeChars = function (text, variant) {
                                if (!variant) variant = this.variant || 'normal';
                                return CommonWrapper.unicodeChars.call(this, text, variant);
                            }
                        }
                        console.log('mathjax loaded');
                        //MathJax.startup.defaultReady();
                    }
                },
                svg: {
                    scale: 0.9,                    // global scaling factor for all expressions
                    minScale: .5,                  // smallest scaling factor to use
                    matchFontHeight: false,        // true to match ex-height of surrounding font
                    mtextInheritFont: false,       // true to make mtext elements use surrounding font
                    merrorInheritFont: true,       // true to make merror text use surrounding font
                    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules
                    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output
                    exFactor: .5,                  // default size of ex in em units
                    displayAlign: 'center',        // default for indentalign when set to 'auto'
                    displayIndent: '0',            // default for indentshift when set to 'auto'
                    fontCache: 'none',             // or 'global' or 'none'
                    localID: null,                 // ID to use for local font cache (for single equation processing)
                    internalSpeechTitles: true,    // insert <title> tags with speech content
                    titleID: 0                     // initial id number to use for aria-labeledby titles
                },
                tex: {
                    tags: 'ams',
                    packages: {
                        '[+]': ['ams']
                    }
                },
                options: {
                    // disable menu
                    renderActions: {
                        addMenu: [0, '', '']
                    },
                    // disable assistive-mml, since it messes up speaker notes
                    menuOptions: {
                        settings: {
                            assistiveMml: false 
                        }
                    }
                }
            };


            // add user-defined Latex macros
            if (options.macros)
            {
                window.MathJax.tex.macros = options.macros;
            }


            // use promise mechanism to make sure that math typesetting
            // is performend before Reveal fires ready-event or
            // generates a PDF
            return new Promise( (resolve) => {

                // load mathjax script
                loadScript( url, () => {

                    // Typeset followed by an immediate reveal.js layout since
                    // the typesetting process could affect slide height
                    window.MathJax.startup.defaultReady();
                    MathJax.startup.promise.then(() => {
                        //console.log("mathjax typeset done");
                        Reveal.layout();
                        fixLinks();
                        setupMathFragments();
                        resolve();
                    });
                });
            });
        }
    }

})();

Reveal.registerPlugin( 'math', RevealMath );
